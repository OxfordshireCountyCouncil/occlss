// --------------------------------------------------
// reflex mixins
// --------------------------------------------------
//
// --------------------------------------------------
// reflex layout generation mixins
// --------------------------------------------------

@mixin reflex-make-reflex-layout($class) {
    @include reflex-loop-reflex-columns($reflex-columns, $class, width);
}

@mixin reflex-calc-reflex-columns($index, $class, $type) {
    @if $type == width and $index > 0 {
        .#{$reflex-prefix}#{$class}#{$index} {
            width: percentage(($index / $reflex-columns));
            *width: percentage(($index / $reflex-columns)) - 0.1;

            //for ie6 support you can uncomment this line but it will increase css filesize dramatically
            //@include reflex-setupCols();
        }
    }
}

@mixin reflex-loop-reflex-columns($index, $class, $type) {
    @if $index >= 0 {
        @include reflex-calc-reflex-columns($index, $class, $type);
        // next iteration
        @include reflex-loop-reflex-columns(($index - 1), $class, $type);
    }
}

// defaults for all cols
@mixin reflex-setupCols() {
    //@include reflex-display-flex();
    @include reflex-flex-direction(column);
    @include reflex-resetWhitespace();
    position: relative;
    width: 100%;
    vertical-align: top;
    padding: $reflex-layout-spacing;
}

// defaults for auto cols
@mixin reflex-setupAutoCols() {
    @include reflex-flex(1, 0, 0px); // a unit on last value is required by IE10-11

    @if $reflex-legacy-support == true {
       // width: auto !important;
        width: auto;
        max-width: 100%;
    }
}

// --------------------------------------------------
// inline-block specific mixins
// --------------------------------------------------

@mixin reflex-setupWhitespace() {
    @if $reflex-legacy-support == true {
        letter-spacing: -0.31em !important;
        *letter-spacing: normal !important;
        word-spacing: -0.43em !important;
    }
}

@mixin reflex-resetWhitespace() {
    @if $reflex-legacy-support == true {
        letter-spacing: normal;
        word-spacing: normal;
        white-space: normal;
    }
}

@mixin reflex-resetTextAlign() {
    //
    // We want to reset any text-align properties set by the layout
    // (required for the inline-block fallback)
    // but we don't want to override any text-align properties
    // set on the individual layout__col-x element
    // or on any of it's child elements
    //
    // The "initial" property is not widely supported so a default of "left" and "start" is provided
    // http://caniuse.com/#search=initial
    //
    // 1) set to left by default (works everywhere)
    // 2) set to start (respects right to left text)
    // 3) set to initial
    //
    text-align: left;
    text-align: start;
    text-align: initial;
    -moz-text-align-last: left;
    -moz-text-align-last: start;
    -moz-text-align-last: initial;
    text-align-last: left;
    text-align-last: start;
    text-align-last: initial;
}

// --------------------------------------------------
// order class generation mixins
// --------------------------------------------------

@mixin reflex-order($order: 0) {
    -ms-flex-order: $order;
    -webkit-order: $order;
    order: $order;
}

@mixin reflex-make-layout--order-helpers() {
    @include reflex-loop-layout--order-helpers($reflex-columns);
}

@mixin reflex-loop-layout--order-helpers($index, $breakpoint: null) {
    @if $index >= 0 {
        .#{$reflex-prefix}layout__col--order-#{$index}#{$breakpoint} {
            @include reflex-order($index);
        }
        // next iteration
        @include reflex-loop-layout--order-helpers(($index - 1), $breakpoint);
    }
}

// --------------------------------------------------
// offset class generation mixins
// --------------------------------------------------

@mixin offset($index: 0) {
    $offset: ($index / $reflex-columns);
    // convert to percentage only if not zero
    @if $offset != 0 {
        $offset: percentage($offset);
    }
    margin-left: $offset;
    //@if $legacy-support == true {
        *margin-left: percentage(($index / $reflex-columns)) - .1; // ie7 css hack
    //}
}

@mixin make-offset-helpers() {
    @include loop-offset-helpers($reflex-columns - 1);
}

@mixin loop-offset-helpers($index, $breakpoint: null) {
    @if $index > 0 and $breakpoint == null {
        .#{$reflex-prefix}layout__col--offset-#{$index}#{$breakpoint} {
            @include offset($index);
        }
        // next iteration
        @include loop-offset-helpers(($index - 1), $breakpoint);
    } @else if $index >= 0 and $breakpoint != null {
        .#{$reflex-prefix}layout__col--offset-#{$index}#{$breakpoint} {
            @include offset($index);
        }
        // next iteration
        @include loop-offset-helpers(($index - 1), $breakpoint);
    }
}


// --------------------------------------------------
// reflex modifier mixins
// --------------------------------------------------

//
// display
// ---

@mixin reflex-display-flex-only() {
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin reflex-display-flex() {
    @if $reflex-legacy-support == true {
        display: inline-block;
    }

    @include reflex-display-flex-only();

    @if $reflex-legacy-support == true {
        *display: inline;
        zoom: 1;
    }
}

//
// flex
// ---

@mixin reflex-flex($grow: 0, $shrink: 1, $basis: auto) {
    @if $basis == 0px {
        -ms-flex: $grow $shrink auto; //ie10 needs auto
    } @else {
        -ms-flex: $grow $shrink $basis;
    }

    -webkit-flex: $grow $shrink $basis;
    flex: $grow $shrink $basis;
}

@mixin reflex-flex-grow($grow:1) {
    -ms-flex-positive: $grow;
    -webkit-flex-grow: $grow;
    flex-grow: $grow;
}

@mixin reflex-flex-shrink($shrink:1) {
    -ms-flex-negative: $shrink;
    -webkit-flex-shrink: $shrink;
    flex-shrink: $shrink;
}

@mixin reflex-flex-basis($basis:auto) {
    -ms-flex-preferred-size: $basis;
    -webkit-flex-basis: $basis;
    flex-basis: $basis;
}

@mixin reflex-flex-flow($direction: row, $wrap: nowrap) {
    -ms-flex-wrap: $wrap;
    -ms-flex-direction: $direction;
    -webkit-flex-flow: $direction $wrap;
    flex-flow: $direction $wrap;
}

@mixin reflex-flex-wrap($wrap: wrap) {
    -ms-flex-wrap: $wrap;
    -webkit-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

@mixin reflex-flex-direction($direction: row) {
    -ms-flex-direction: $direction;
    -webkit-flex-direction: $direction;
    flex-direction: $direction;
}

//
// align
// ---

@mixin reflex-align-items($align: stretch) {
    @include reflex-ms-align-items($align);
    -webkit-align-items: $align;
    align-items: $align;
}

@mixin reflex-align-self($align: stretch) {
    @include reflex-ms-align-self($align);
    -webkit-align-self: $align;
    align-self: $align;
}

@mixin reflex-align-content($align: stretch) {
    @include reflex-ms-align-content($align);
    -webkit-align-content: $align;
    align-content: $align;
}

//
// ie10 syntax for align
// ---

@mixin reflex-ms-align-items($align) {
    @if $align == 'flex-start' {
        -ms-flex-align: start;
    } @else if $align == 'flex-end' {
        -ms-flex-align: end;
    } @else {
        -ms-flex-align: $align;
    }
}

@mixin reflex-ms-align-self($align) {
    @if $align == 'flex-start' {
        -ms-flex-item-align: start;
    } @else if $align == 'flex-end' {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $align;
    }
}

@mixin reflex-ms-align-content($align) {
    @if $align == 'flex-start' {
        -ms-flex-line-pack: start;
    } @else if $align == 'flex-end' {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $align;
    }
}

//
// justify-content
//
// Uses "text-align" for the fallback inline-block layout
// "text-align" is globally supported and works on all rows except the last
// "text-align-last", where supported, handles the last line (and, happily, layouts with only one row)
// ---

@mixin reflex-justify-content-start() {
    @if $reflex-legacy-support == true {
        text-align: left;
    }
    -ms-flex-pack: start;
    -webkit-justify-content: flex-start;
    justify-content: flex-start;
}

@mixin reflex-justify-content-end() {
    @if $reflex-legacy-support == true {
        text-align: right;
        -moz-text-align-last: right;
        text-align-last: right;
    }
    -ms-flex-pack: end;
    -webkit-justify-content: flex-end;
    justify-content: flex-end;
}

@mixin reflex-justify-content-center() {
    @if $reflex-legacy-support == true {
        text-align: center;
        -moz-text-align-last: center;
        text-align-last: center;
    }
    -ms-flex-pack: center;
    -webkit-justify-content: center;
    justify-content: center;
}

@mixin reflex-justify-content-space-between() {
    @if $reflex-legacy-support == true {
        text-align: justify;
        -moz-text-align-last: justify;
        text-align-last: justify;
    }
    -ms-flex-pack: justify;
    -webkit-justify-content: space-between;
    justify-content: space-between;
}

@mixin reflex-justify-content-space-around() {
    @if $reflex-legacy-support == true {
        text-align: justify;
        -moz-text-align-last: justify;
        text-align-last: justify;
    }
    -ms-flex-pack: justify;
    -webkit-justify-content: space-around;
    justify-content: space-around;
}

// --------------------------------------------------
// other mixins
// --------------------------------------------------

@mixin reflex-responsive-visibility-helpers() {
    @if $reflex-visibility-helpers == true {
        .occlss-layout__col--hidden-xxs {
            @media (max-width: map-get($reflex-breakpoints-max, 'xxs')) {
                display: none;
            }
        }
        .occlss-layout__col--hidden-xs {
            @media (min-width: map-get($reflex-breakpoints, 'xs')) and (max-width: map-get($reflex-breakpoints-max, 'xs')) {
                display: none;
            }
        }
        .occlss-layout__col--hidden-sm {
            @media (min-width: map-get($reflex-breakpoints, 'sm')) and (max-width: map-get($reflex-breakpoints-max, 'sm')) {
                display: none;
            }
        }
        .occlss-layout__col--hidden-md {
            @media (min-width: map-get($reflex-breakpoints, 'md')) and (max-width: map-get($reflex-breakpoints-max, 'md')) {
                display: none;
            }
        }
        .occlss-layout__col--hidden-lg {
            @media (min-width: map-get($reflex-breakpoints, 'lg')) {
                display: none;
            }
        }
    }
}